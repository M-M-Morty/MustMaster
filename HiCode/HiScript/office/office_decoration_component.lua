---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yongzyzhang.
--- DateTime: 2024/4/26 上午11:05
---

local G = require("G")
local Actor = require("common.actor")

local SubsystemUtils = require("common.utils.subsystem_utils")
local utils = require("common.utils")
local EdUtils = require("common.utils.ed_utils")
local BPConst = require("common.const.blueprint_const")
local GlobalActorConst = require("common.const.global_actor_const")

local ComponentBase = require("common.componentbase")
local Component = require("common.component")

---装饰物组件， 一个Actor具有此组件，就有换肤等装修功能
---@class OfficeDecorationComponent
---@field FurnitureGroup Actor 是否属于某个家具组
local OfficeDecorationComponent = Component(ComponentBase)
function OfficeDecorationComponent:ReceiveBeginPlay()
    Super(OfficeDecorationComponent).ReceiveBeginPlay(self)

    self.actor = self:GetOwner()
    
    self:BackupOriginModelInfo()
    if not self.FurnitureGroup then
        --名称做ID
        local ActorName = UE.UKismetSystemLibrary.GetObjectName(self.actor)
        local StarIndex,_, _ = string.find(ActorName, "_SpawnIndex_")
        if StarIndex then
            self.ActorID = string.sub(ActorName, 1, StarIndex - 1)
        else
            self.ActorID = ActorName
        end
        local bIsServer = UE.UHiUtilsFunctionLibrary.IsServer(self)

        if not bIsServer then
            local OfficeSubsystem = SubsystemUtils.GetOfficeSubsystem(self)
            if OfficeSubsystem then
                self.DefaultDecorationInfo = OfficeSubsystem:GetFurnitureDefaultDecorationInfo(self.actor)
                self.CurrentModelID = self.DefaultDecorationInfo.BasicModelKey

                OfficeSubsystem:OnOfficeDecorationActorBeginPlay(self.ActorID, self.DefaultDecorationInfo)
                OfficeSubsystem:RegisterClientActorDecoratedEvent(self.ActorID, self, self.OnActorDecorated)
            end
        end
    else
        self.FurnitureGroup:OnChildActorPrepared()
    end
end

function OfficeDecorationComponent:SetActorID(ActorID)
    self.ActorID = ActorID
end


function OfficeDecorationComponent:ReceiveEndPlay()
    Super(OfficeDecorationComponent).ReceiveEndPlay(self)
    local bIsServer = UE.UHiUtilsFunctionLibrary.IsServer(self)
    if ( not bIsServer ) and not self.FurnitureGroup then
        ---@type OfficeSubsystem
        local OfficeSubsystem = SubsystemUtils.GetOfficeSubsystem(self)
        if OfficeSubsystem then
            OfficeSubsystem:OnOfficeDecorationActorEndPlay(self.ActorID)
            OfficeSubsystem:UnRegisterClientActorDecoratedEvent(self.ActorID, self, self.OnActorDecorated)
        end
    end
end

--换肤后会丢失的原始模型信息，做一个备份
function OfficeDecorationComponent:BackupOriginModelInfo()
    local PathName = tostring(UE.UKismetSystemLibrary.GetPathName(self.actor:GetClass()))
    -- 去掉_C
    PathName = PathName:sub(1,-3)
    self.PathName = PathName

    local TargetMeshComp = self:GetSkinAttachedMeshComponent()
    local OriginMaterial = TargetMeshComp:GetMaterial(0)
    self.SavedOriginSkinMaterialPathName = UE.UKismetSystemLibrary.GetPathName(OriginMaterial)
    
    local OfficeSubsystem = SubsystemUtils.GetOfficeSubsystem(self)
    self.OriginDefaultColors = OfficeSubsystem:GetMaterialDefaultColors(self.SavedOriginSkinMaterialPathName)
    self.MaterialDefaultColors = self.OriginDefaultColors
end

function OfficeDecorationComponent:GetOriginDefaultColors()
    return self.OriginDefaultColors
end

function OfficeDecorationComponent:OnActorDecorated(DecorationInfo, EventParam)
    if UE.UHiUtilsFunctionLibrary.IsServer(self) then
        return
    end
    
    if DecorationInfo.ActorID ~= self.ActorID then
        return
    end
    
    --拆除了
    if DecorationInfo.bRemoved then
        G.log:info("yongzyzhang", "OfficeDecorationComponent destroy ActorID:%s", self.ActorID)
        self.actor:K2_DestroyActor()
        return
    end
    
    ---@type OfficeSubsystem
    local OfficeSubsystem = SubsystemUtils.GetOfficeSubsystem(self)
    
    if DecorationInfo.SkinKey and DecorationInfo.SkinKey ~= "" then
        self.CurrentModelID = DecorationInfo.SkinKey
    else
        self.CurrentModelID = self.DefaultDecorationInfo.BasicModelKey
    end
    local SkinDTConfig = OfficeSubsystem:GetOfficeDataTableRow(self.CurrentModelID)
    assert(SkinDTConfig ~= nil, "SkinDTConfig is nil, CurrentModelID:" .. tostring(self.CurrentModelID))

    G.log:info("yongzyzhang", "OfficeDecorationComponent world:%s", self:GetWorld())

    ---@type OfficeManager
    local OfficeManager = UE.UHiGlobalActorLibrary.GetGlobalActorByName(GlobalActorConst.OfficeManager, self)
    --local OfficeManager = SubsystemUtils.GetGlobalActorSubsystem(self):GetGlobalActorByName(GlobalActorConst.OfficeManager)

    -- 更换了蓝图
    if SkinDTConfig and self:IsModelBPChanged(SkinDTConfig) then
        OfficeManager:DestroyAndRespawnNewModelActor(self.actor, DecorationInfo, EventParam)
        return
    end
    -- 没有换蓝图，正常换肤
    self:UpdateSkinAndComponent(DecorationInfo, SkinDTConfig, EventParam)
end

function OfficeDecorationComponent:IsModelBPChanged(SkinDTConfig)
    local PathName = tostring(UE.UKismetSystemLibrary.GetPathName(self.actor:GetClass()))
    -- 去掉_C
    PathName = PathName:sub(1,-3)
    
    --更换了蓝图，需要销毁重新创建
    if SkinDTConfig and SkinDTConfig.BP and tostring(SkinDTConfig.BP) ~= PathName then
        return true
    end   
    return false
end

---更换皮肤或者组件
---@param DecorationInfo FOfficeDecorationActorInfo
function OfficeDecorationComponent:UpdateSkinAndComponent(DecorationInfo, SkinDTConfig, EventParam)
    if SkinDTConfig ~= nil then
        self:__ChangeSkin(DecorationInfo, tostring(SkinDTConfig.Material))
    end
    self:__ChangeColor(DecorationInfo)
end

function OfficeDecorationComponent:OnFurnitureGroupDecorated(DecorationInfo, GroupDTConfig, EventParam)
    local UsingSubConfig = nil
    for SubChildBP, SubConfig in pairs(GroupDTConfig.ChildModelBPMap:ToTable()) do
        if tostring(SubChildBP) == self.PathName then
            UsingSubConfig = SubConfig
        end
    end
    
    if UsingSubConfig then
        self:ChangeSkinByFurnitureGroup(DecorationInfo, tostring(UsingSubConfig.Material))
        self:ChangeColorByFurnitureGroup(DecorationInfo, UsingSubConfig.ComponentMasks:ToTable())
    else
        self:ChangeSkinByFurnitureGroup(DecorationInfo, self.SavedOriginSkinMaterialPathName)
        self:ChangeColorByFurnitureGroup(DecorationInfo, {})
    end
end

function OfficeDecorationComponent:GetSkinAttachedMeshComponent()
    local StaticMeshComponents = self.actor:K2_GetComponentsByClass(UE.UStaticMeshComponent)
    local TargetMeshComp = StaticMeshComponents[1]

    -- 多个Mesh时使用有"DecoratorComp"这个Tag的组件
    if StaticMeshComponents:Length() > 1 then
        for _, MeshComp in pairs(StaticMeshComponents:ToTable()) do
            for _, ComponentTag in pairs(MeshComp.ComponentTags) do
                if ComponentTag == "DecoratorComp" then
                    TargetMeshComp = MeshComp
                    break
                end
            end
        end
    end
    return TargetMeshComp
end

function OfficeDecorationComponent:ChangeSkinByFurnitureGroup(DecorationInfo, NewMaterialName)
    self:__ChangeSkin(DecorationInfo, NewMaterialName)
end

function OfficeDecorationComponent:__ChangeSkin(DecorationInfo, NewMaterialName)
    local TargetMeshComp = self:GetSkinAttachedMeshComponent()

    local OldMaterial = TargetMeshComp:GetMaterial(0)
    local OldMaterialPathName = UE.UKismetSystemLibrary.GetPathName(OldMaterial)
    G.log:info("yongzyzhang", "OldMaterialPathName:%s SkinDTConfig.Material:%s", OldMaterialPathName, NewMaterialName)
    if OldMaterialPathName ~= NewMaterialName then
        -- 换材质
        local MaterialInstance = UE.UObject.Load(NewMaterialName)
        if MaterialInstance then
            TargetMeshComp:SetMaterial(0, MaterialInstance)
            self:SetTargetStaticMesh(TargetMeshComp)
            self:UpdateMaterialInstance()
            ---@type OfficeSubsystem
            local OfficeSubsystem = SubsystemUtils.GetOfficeSubsystem(self)
            self.MaterialDefaultColors = OfficeSubsystem:GetMaterialDefaultColors(NewMaterialName)
            G.log:info("yongzyzhang", "NewMaterial :%s succeed changed", NewMaterialName)
        else
            G.log:error("yongzyzhang", "NewMaterial :%s is not exist", NewMaterialName)
        end
        return true
    end
    return false
end

function OfficeDecorationComponent:ChangeColorByFurnitureGroup(DecorationInfo, ComponentMasks)
    local UsingComponentDict = {}
    for _, ComponentMask in pairs(ComponentMasks) do
        UsingComponentDict[ComponentMask] = true
    end
    local DecorationInfoCopy = DecorationInfo:Copy()
    DecorationInfoCopy.Component:Clear()
    -- 约定只使用属于换肤组中Actor材质中染色Mask的前几个可染色属性
    local RealChangeColorMaskIndex = 1
    for _, ComponentInfo in pairs(DecorationInfo.Component:ToTable()) do
        local PartIndex = ComponentInfo.Index
        if UsingComponentDict[PartIndex] then
            ComponentInfo.Index = RealChangeColorMaskIndex
            RealChangeColorMaskIndex = RealChangeColorMaskIndex + 1
            DecorationInfoCopy.Component:Add(ComponentInfo)
        end
    end
    self:__ChangeColor(DecorationInfoCopy)
end

function OfficeDecorationComponent:__ChangeColor(DecorationInfo)
    -- 根据DecorationInfo数据 创建或者更新本地装饰物Actor的显示
    local DecorationColorDict = {}
    for _, ComponentInfo in pairs(DecorationInfo.Component:ToTable()) do
        local PartIndex = ComponentInfo.Index
        if ComponentInfo.Color then
            DecorationColorDict[PartIndex] = ComponentInfo.Color
        end
        G.log:info("yongzyzhang", "OfficeDecorationComponent UpdateSkinAndComponent change actor:%s PartIndex:%s, color:%s",
                self.ActorID, PartIndex, utils.ToString(ComponentInfo.Color))
    end
    
    -- 补上默认颜色
    for PartIndex, DefaultPartColor in pairs(self.MaterialDefaultColors) do
        if DecorationColorDict[PartIndex] == nil then
            DecorationColorDict[PartIndex] = DefaultPartColor
        end
        self["MaskedColor_" .. tostring(PartIndex)] = DecorationColorDict[PartIndex]
    end

    self:SetMaskedColor()
end



return OfficeDecorationComponent
