---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yongzyzhang.
--- DateTime: 2024/6/14 下午8:06
---
local G = require("G")
local EventDispatcher = require("common.event_dispatcher")

local EventTypeMap = {
    OnNotifyOfficeLevel = "OnNotifyOfficeLevel",
    OnNotifyOfficeAsset = "OnNotifyOfficeAsset",
    
    OnNotifyPlayerHeroCharacter = "OnNotifyPlayerHeroCharacter",
}

---@class GameEventBus
local M = UnLua.Class()

M.EventType = EventTypeMap

function M:ctor(GameInstance)
    self.GameInstance = GameInstance
    self.EventDispatcher = EventDispatcher.new()
    self.EventDispatcher:Initialize()
end

function M:RegisterEventListener(EventType, Listener, Callback)
    if not self.EventType[EventType] then
        G.log:error("GameEventBus", "GameEventBus:RegisterEventListener invalid EventType:%s", EventType)
        return
    end
    local InnerCallback = function(...)
        local PackArgs = {...}
        xpcall(function()
            Callback(Listener, table.unpack(PackArgs))
        end, function (errobj)
            if errobj then
                G.log:error("GameEventBus" ,"GameEventBus Event Listerner Callback Error:" .. errobj .. debug.traceback())
            else
                G.log:error("GameEventBus" ,"GameEventBus Event Listerner Callback Error:" .. debug.traceback())
            end
        end)
    end
    local CallbackObj = {
        identity = Callback,
        callback = InnerCallback,
    }

    self.EventDispatcher:AddListener(self.EventType[EventType], Listener, CallbackObj)
end

function M:UnregisterEventListener(EventType, Listener, Callback)
    if not self.EventType[EventType] then
        G.log:error("GameEventBus", "GameEventBus:UnregisterEventListener invalid EventType:%s", EventType)
        return
    end
    self.EventDispatcher:RemoveListener(self.EventType[EventType], Listener, Callback)
end

function M:UnregisterByListenerObj(Listener)
    self.EventDispatcher:RemoveListenerAllEvents(Listener)
end

function M:BroadCastEvent(EventType, ...)
    if not self.EventType[EventType] then
        G.log:error("GameEventBus", "GameEventBus:UnregisterEventListener invalid EventType:%s", EventType)
        return
    end
    local PackArgs = {...}
    self.EventDispatcher:Broadcast(self.EventType[EventType], table.unpack(PackArgs))
end

local __GameInstanceEnv = {
    
}

---@return GameEventBus
function M.GetEventBusInstance(GameInstanceContext)
    assert(GameInstanceContext ~= nil)
    local GameInstance = UE.UGameplayStatics.GetGameInstance(GameInstanceContext)
    if not __GameInstanceEnv[GameInstance] then
        __GameInstanceEnv[GameInstance] = M.new(GameInstance)
    end
    return __GameInstanceEnv[GameInstance]
end

return M
