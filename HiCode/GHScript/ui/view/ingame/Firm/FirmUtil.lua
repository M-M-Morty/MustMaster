---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xuw.
--- DateTime: 2024/1/17 9:52
---
local FirmMapLegendTypeTableConst = require("common.data.firm_map_legend_type_data")
local FirmMapLegendTypeTable = require("common.data.firm_map_legend_type_data").data
local FirmMapLegendTable = require("common.data.firm_map_legend_data").data
local G = require('G')
local json = require("thirdparty.json")

local FirmUtil = {}

---@type table<any, MissionChangedCallbackT>
local MissionChanged = {}

---@alias MissionChangedCallback fun(Mission:MissionObject)

---@class MissionChangedCallbackT
---@field Self any
---@field Callback MissionChangedCallback

---@class MapLegendData
---@field Legend_Name string
---@field Legend_ID string
---@field OwningMap string
---@field Legend_Positon string

---@class MapJsonLegendData
---@field uuid string
---@field Legend_ID string
---@field Legend_Name string
---@field Legend_Positon string

---@class MapLegendTypeData
---@field LegendType string
---@field Legend_Priority int
---@field Legend_Scale float
---@field Legend_Name string
---@field Legend_Icon string
---@field Legend_Guide boolean
---@field Legend_Hover_Text boolean


---注册
---@param Self any
---@param Callback MissionChangedCallback
function FirmUtil.RegMissionChanged(Self, Callback)
    MissionChanged[Self] = {
        Self = Self,
        Callback = Callback
    }
end

---卸载
---@param Self any
---@param Callback MissionChangedCallback
function FirmUtil.UnRegMissionChanged(Self, Callback)
    MissionChanged[Self] = nil
end

---通知任务变化
---@param Mission MissionObject
function FirmUtil.NotifyMissionChanged(Mission)
    for _, v in pairs(MissionChanged) do
        v.Callback(v.Self, Mission)
    end
end

---获取任务列表
---@return MissionObject[]
function FirmUtil.GetMissions()
    return nil
end

---获取地图上的json图例数据
---@param MapId string
---@return MapJsonLegendData[]
local function GetJsonMapData(MapId)
    if MapId == nil then
        G.log:warn("FirmUtil", "Error! MapId is nil")
        return
    end
    local MinMapLabel = {}
    local MinMapJsonData = {}
    local FileDir = string.format("%s/Data/EditorData/%s/MiniMap/MiniMap.json", UE.UKismetSystemLibrary.GetProjectContentDirectory(), tostring(MapId))
    local FileContent = FirmUtil.ReadFile(FileDir)
    if FileContent == nil then
        return
    end
    ---@type table<string,MapJsonLegendData>
    MinMapLabel = json.decode(FileContent)
    return MinMapLabel
end

---通过图例LegendId获取json对应的uuid,便于传送
---@param MapId string
---@param Legend_ID string
---@return string
function FirmUtil.GetJsonActorIdByLegendId(MapId, Legend_ID)
    local ActorId = nil
    if Legend_ID == nil or MapId == nil then
        G.log:warn("FirmUtil", "Error! Legend_ID or MapId is nil")
        return
    end
    local MapJsonData = GetJsonMapData(MapId)
    for i, jsonData in pairs(MapJsonData) do
        if tonumber(jsonData.Legend_ID) == tonumber(Legend_ID) then
            ActorId = jsonData.uuid
            return ActorId
        end
    end
end

---json数据转配置表结构
---@param JsonData MapJsonLegendData
---@return MapLegendData
local function JsonDataToLegendData(JsonData)
    local MapLegendData = { }
    MapLegendData.Legend_ID = JsonData.Legend_ID
    MapLegendData.Legend_Name = JsonData.Legend_Name
    MapLegendData.uuid = JsonData.uuid
    MapLegendData.Legend_Positon = {JsonData.Legend_Positon.x, JsonData.Legend_Positon.y, JsonData.Legend_Positon.z}
    return MapLegendData
end

---通过Key获取Json单个图例数据
---@param MapId string
---@param ShowId string
---@return MapJsonLegendData
local function GetMapJsonDataByKey(MapId, ShowId)
    local JsonData = nil
    if MapId == nil or ShowId == nil then
        G.log.warn("FirmUtil", "Error! ShowId or MapId is nil")
        return
    end
    local MapJsonData = GetJsonMapData(MapId)
    for i, v in pairs(MapJsonData) do
        if ShowId == tonumber(i) then
            JsonData = v
        end
    end
    return JsonData
end

---获取图例表数据
---@param MapId string
---@return MapLegendData[]
function FirmUtil.GetMapLegendDataByMapId(MapId)
    if MapId == nil then
        G.log:warn("FirmUtil", "Error! MapId is nil")
        return
    end
    local MapLegendData = {}
    for i, v in pairs(FirmMapLegendTable) do
        if v.OwningMap == tostring(MapId) then
            MapLegendData[i] = v
        end
    end
    local JsonMapData = GetJsonMapData(MapId)
    if JsonMapData == nil then
        return
    end
    for i, v in pairs(JsonMapData) do
        MapLegendData[tonumber(i)] = JsonDataToLegendData(v)
    end
    return MapLegendData
end

---获取单个图例表数据
---@param MapId string
---@param ShowId string
---@return MapLegendData
function FirmUtil.GetMapLegendOnlyDataById(MapId, ShowId)
    local Data = nil
    if ShowId == nil or MapId == nil then
        G.log:warn("FirmUtil", "Error! ShowId or MapId is nil")
        return
    end
    Data = FirmMapLegendTable[tonumber(ShowId)]
    if Data == nil then
        Data = GetMapJsonDataByKey(MapId, ShowId)
        if Data then
            Data = JsonDataToLegendData(Data)
        end
    end
    return Data
end

---获取单个图例类型表数据
---@param Legend_ID string
---@return MapLegendTypeData
function FirmUtil.GetMapLegendTypeDataById(Legend_ID)
    local Data = nil
    if Legend_ID == nil then
        G.log:warn("FirmUtil", "Error! ShowId is nil")
        return
    end
    Data = FirmMapLegendTypeTable[tonumber(Legend_ID)]
    if Data == nil then
        G.log:warn("FirmUtil", "Error! Data is nil")
        return
    end
    return Data
end

---通过图例类型获取对应图例类型表里的Id
---@param Type string
function FirmUtil.GetMapLegendIdByType(Type)
    if Type == nil then
        G.log:warn("FirmUtil", "Error! Type is nil")
    end
    for i, v in pairs(FirmMapLegendTypeTable) do
        if v.LegendType == Type then
            return i
        end
    end
end

---获取图例类型表数据
function FirmUtil.GetMapLegendTypeData()
    local MapTypeData = {}
    for i, v in pairs(FirmMapLegendTypeTable) do
        MapTypeData[i] = v
    end
    return MapTypeData
end

---@param FileName string
---@return string
FirmUtil.ReadFile = function(FileName)
    local File = UE.File()
    if not File:Open(FileName, "r") then
        G.log:warn("SlotSave.ReadFile err " .. FileName)
        return 
    end
    local Content = File:Read("a")
    File:Close()
    return Content
end

---@param FileName string
---@param Content string
---@return integer
FirmUtil.WriteFile = function(FileName, Content)
    local File = UE.File()
    if not File:Open(FileName, "w+") then
        G.log:warn("SlotSave.WriteFile err " .. FileName)
        return ""
    end
    local Num = File:Write(Content)
    File:Close()
    return Num
end

FirmUtil.MaxLegendPriority = -1

---@return integer
function FirmUtil.GetMaxLegendPriority()
    local Max = FirmUtil.MaxLegendPriority
    if Max < 0 then
        for _, v in pairs(FirmMapLegendTypeTable) do
            if v.Legend_Priority then
                if Max < v.Legend_Priority then
                    Max = v.Legend_Priority
                end
            end
        end
    end
    FirmUtil.MaxLegendPriority = Max
    return Max
end

FirmUtil.MaxLegendID = -1

---@return integer
function FirmUtil.GetMaxLegendID()
    local Max = FirmUtil.MaxLegendID
    if Max < 0 then
        for i, _ in pairs(FirmMapLegendTypeTable) do
            if Max < i then
                Max = i
            end
        end
    end
    FirmUtil.MaxLegendID = Max
    return Max
end

--local PLAYER_Z_ORDER = 1073741824   ---这是2的30次方，测过不会超过zorder最大值
local PLAYER_Z_ORDER =16384
local MISSION_Z_ORDER = PLAYER_Z_ORDER-1
local ZORDER_PARAM1 = 100
local ZORDER_PARAM2 = 10


---@param Icon WBP_FirmMapLabel
local function GetIconTypeData(Icon)
    local MapId = FirmUtil.GetCurrentMapId(Icon)
    if Icon then
        if Icon.Type == FirmMapLegendTypeTableConst.PlayerPosition or Icon.Type == FirmMapLegendTypeTableConst.Anchor then
            return FirmMapLegendTypeTable[tonumber(Icon.ShowId)]
        else
            local IconData = FirmUtil.GetMapLegendOnlyDataById(MapId, Icon.ShowId)
            if IconData then
                local IconId = IconData.Legend_ID
                return FirmMapLegendTypeTable[tonumber(IconId)]
            end
        end
    end
    return nil
end

---@param Label WBP_FirmMapLabel
function FirmUtil.GetZOrder(Label, LabelCount)
    local MapId = FirmUtil.GetCurrentMapId(Label)
    local IconData = FirmUtil.GetMapLegendOnlyDataById(MapId, Label.ShowId)

    local IconType = GetIconTypeData(Label)
    if not IconType then
        G.log:warn("[WBP_Firm_Content]  AddLabel Cannot find icon data!")
        return
    end
    if Label.Type == FirmMapLegendTypeTableConst.PlayerPosition then
        return PLAYER_Z_ORDER
    elseif Label.IsTrace or Label.Mission then
        
        return MISSION_Z_ORDER
    else
        local MaxPriority = FirmUtil.GetMaxLegendPriority() + 1
        local LegendPriority = MaxPriority
        if IconType.Legend_Priority and IconType.Legend_Priority > 0 then
            LegendPriority = IconType.Legend_Priority
            
        end
        local MaxID = FirmUtil.GetMaxLegendID()
        local ID = IconData.Legend_ID
        local ZOrder = ((MaxPriority - LegendPriority) * ZORDER_PARAM1 + (MaxID - ID)) * ZORDER_PARAM2 + LabelCount
        return ZOrder
    end
end

---@param WorldContext UObject
function FirmUtil.GetCurrentMapId(WorldContext)
    return WorldContext:GetWorld():GetName()
end

return FirmUtil