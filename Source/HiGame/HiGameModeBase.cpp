// Copyright Epic Games, Inc. All Rights Reserved.


#include "HiGameModeBase.h"

#include "Characters/HiPlayerController.h"
#include "NetCommon/DistributedDSConnectionBase.h"
#include "UObject/ConstructorHelpers.h"
#include "GEOSpaceManager.h"
#include "Characters/HiPlayerController.h"
#include "Kismet/GameplayStatics.h"


AHiGameModeBase::AHiGameModeBase()
{	
}

FString AHiGameModeBase::InitNewPlayer(APlayerController* NewPlayerController, const FUniqueNetIdRepl& UniqueId, const FString& Options, const FString& Portal)
{
	return Super::InitNewPlayer(NewPlayerController, UniqueId, Options, Portal);
}

APlayerController* AHiGameModeBase::Login(UPlayer* NewPlayer, ENetRole InRemoteRole, const FString& Portal, const FString& Options, const FUniqueNetIdRepl& UniqueId, FString& ErrorMessage)
{
	return Super::Login(NewPlayer, InRemoteRole, Portal, Options, UniqueId, ErrorMessage);
}

void AHiGameModeBase::PostLogin(APlayerController* NewPlayer)
{
	Super::PostLogin(NewPlayer);
	if (auto* PC = Cast<AHiPlayerController>(NewPlayer))
	{
		if (auto* SpaceManager = GetWorld()->GetSubsystem<UGeoSpaceManager>())
		{
			TArray<FGeoRegionInfo> RegionInfoList = SpaceManager->GetRegionInfo();
			PC->ClientSetGeoSpaceInfo(SpaceManager->GetWorldConfig(), RegionInfoList);
		}
	}
}

void AHiGameModeBase::ReplicateStreamingStatus(APlayerController* PC)
{
	if (auto* PlayerController = Cast<AHiPlayerController>(PC))
	{
		PlayerController->PlayerReplicateStreamingStatus();
	}
	else
	{
		Super::ReplicateStreamingStatus(PC);
	}
}


bool AHiGameModeBase::EnableCheats_Implementation(APlayerController* P)
{
	return Super::AllowCheats(P); // Always allow cheats in editor (PIE now supports networking)
}

bool AHiGameModeBase::AllowCheats(APlayerController* P)
{
	return EnableCheats(P);
}

APlayerController* AHiGameModeBase::SpawnPlayerController(ENetRole InRemoteRole, const FString& Options)
{
	FLoginProgressScope ProgressScope(this, Options);
	return Super::SpawnPlayerController(InRemoteRole, Options);
}

APlayerController* AHiGameModeBase::SpawnPlayerControllerCommon(ENetRole InRemoteRole, FVector const& SpawnLocation, FRotator const& SpawnRotation, TSubclassOf<APlayerController> InPlayerControllerClass)
{
	FActorSpawnParameters SpawnInfo;
	SpawnInfo.Instigator = GetInstigator();
	SpawnInfo.ObjectFlags |= RF_Transient;	// We never want to save player controllers into a map
	SpawnInfo.bDeferConstruction = true;
	APlayerController* NewPC = GetWorld()->SpawnActor<APlayerController>(InPlayerControllerClass, SpawnLocation, SpawnRotation, SpawnInfo);
	if (NewPC)
	{
		if (InRemoteRole == ROLE_SimulatedProxy)
		{
			// This is a local player because it has no authority/autonomous remote role
			NewPC->SetAsLocalPlayerController();
		}
		
		AHiPlayerController* HiPC = Cast<AHiPlayerController>(NewPC);
		if (HiPC && bInLoginProgressScope)
		{
			// EntityID allocated by LobbyService
			FString PlayerID = UGameplayStatics::ParseOption(LoginProgressOptions, "PlayerID");
			if (!PlayerID.IsEmpty())
			{
				HiPC->InitPlayerProxyID(FCString::Atoi64(*PlayerID));
			}
			// Guid generated by G6
			FString PlayerGuid = UGameplayStatics::ParseOption(LoginProgressOptions, "Guid");
			if (!PlayerGuid.IsEmpty())
			{
				HiPC->InitPlayerGuid(FCString::Atoi64(*PlayerGuid));
			}
			// Guid generated by G6
			FString PlayerRoleId = UGameplayStatics::ParseOption(LoginProgressOptions, "PlayerRoleId");
			if (!PlayerRoleId.IsEmpty())
			{
				HiPC->InitPlayerRoleId(FCString::Atoi64(*PlayerRoleId));
			}
		}

		UGameplayStatics::FinishSpawningActor(NewPC, FTransform(SpawnRotation, SpawnLocation));
	}

	return NewPC;
}
