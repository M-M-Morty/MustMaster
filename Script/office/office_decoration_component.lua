---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by yongzyzhang.
--- DateTime: 2024/4/26 上午11:05
---

local G = require("G")
local Actor = require("common.actor")

local SubsystemUtils = require("common.utils.subsystem_utils")
local utils = require("common.utils")
local EdUtils = require("common.utils.ed_utils")
local BPConst = require("common.const.blueprint_const")
local GlobalActorConst = require("common.const.global_actor_const")

local ComponentBase = require("common.componentbase")
local Component = require("common.component")

---装饰物组件， 一个Actor具有此组件，就有换肤等装修功能
---@class OfficeDecorationComponent
local OfficeDecorationComponent = Component(ComponentBase)
function OfficeDecorationComponent:ReceiveBeginPlay()
    Super(OfficeDecorationComponent).ReceiveBeginPlay(self)

    self.actor = self:GetOwner()
    
    --名称做ID
    local ActorName = UE.UKismetSystemLibrary.GetObjectName(self.actor)
    local StarIndex,_, _ = string.find(ActorName, "_SpawnIndex_")
    self.ActorID = string.sub(ActorName, 1, StarIndex - 1)
    
    local bIsServer = UE.UHiUtilsFunctionLibrary.IsServerWorld()

    if not bIsServer then
        local OfficeSubsystem = SubsystemUtils.GetOfficeSubsystem(self)
        if OfficeSubsystem then
            OfficeSubsystem:OnOfficeDecorationActorBeginPlay(self.ActorID, self:GetDefaultDecorationInfo())
            OfficeSubsystem:RegisterClientActorDecoratedEvent(self.ActorID, self, self.OnActorDecorated)
        end
    end
end


function OfficeDecorationComponent:ReceiveEndPlay()
    Super(OfficeDecorationComponent).ReceiveEndPlay(self)
    
    ---@type OfficeSubsystem
    local OfficeSubsystem = SubsystemUtils.GetOfficeSubsystem(self)
    if OfficeSubsystem then
        OfficeSubsystem:OnOfficeDecorationActorEndPlay(self.ActorID)
        OfficeSubsystem:UnRegisterClientActorDecoratedEvent(self.ActorID, self, self.OnActorDecorated)
    end
end
 

function OfficeDecorationComponent:OnActorDecorated(DecorationInfo, EventParam)
    if UE.UHiUtilsFunctionLibrary.IsServer(self) then
        return
    end
    
    if DecorationInfo.ActorID ~= self.ActorID then
        return
    end
    
    --拆除了
    if DecorationInfo.bRemoved then
        G.log:info("yongzyzhang", "OfficeDecorationComponent destroy ActorID:%s", self.ActorID)
        self.actor:K2_DestroyActor()
        return
    end
    
    ---@type OfficeSubsystem
    local OfficeSubsystem = SubsystemUtils.GetOfficeSubsystem(self)
    
    if DecorationInfo.SkinKey and DecorationInfo.SkinKey ~= "" then
        self.CurrentModelID = DecorationInfo.SkinKey
    else
        self.CurrentModelID = self.BasicModelKey
    end
    local SkinDTConfig = OfficeSubsystem:GetOfficeDataTableRow(self.CurrentModelID)

    G.log:info("yongzyzhang", "OfficeDecorationComponent world:%s", self:GetWorld())

    ---@type OfficeManager
    local OfficeManager = UE.UHiGlobalActorLibrary.GetGlobalActorByName(GlobalActorConst.OfficeManager, self)
    --local OfficeManager = SubsystemUtils.GetGlobalActorSubsystem(self):GetGlobalActorByName(GlobalActorConst.OfficeManager)

    -- 更换了蓝图
    if SkinDTConfig and self:IsModelBPChanged(SkinDTConfig) then
        OfficeManager:DestroyAndRespawnNewModelActor(self.actor, DecorationInfo, EventParam)
        return
    end
    -- 没有换蓝图，正常换肤
    self:UpdateSkinAndComponent(DecorationInfo, SkinDTConfig, EventParam)
end

function OfficeDecorationComponent:GetDefaultDecorationInfo()
    local PathName = tostring(UE.UKismetSystemLibrary.GetPathName(self.actor:GetClass()))
    -- 去掉_C
    PathName = PathName:sub(1,-3)
    ---@type FOfficeDecorationActorInfo
    local DefaultDecorationInfo = Struct.BPS_OfficeDecorationInfo()
    DefaultDecorationInfo.ActorID = self.ActorID
    
    ---@type OfficeSubsystem
    local OfficeSubsystem = SubsystemUtils.GetOfficeSubsystem(self)
    for _, RowName in pairs(OfficeSubsystem:GetOfficeDataTableRowNames():ToTable()) do
        local SkinDTConfig = OfficeSubsystem:GetOfficeDataTableRow(RowName)
        if SkinDTConfig and SkinDTConfig.BP and tostring(SkinDTConfig.BP) == PathName then
            local ModelConfig = OfficeSubsystem:GetOfficeModelConfig(RowName)
            if not ModelConfig.IsBasicMesh then
                local BasicMeshRowName = OfficeSubsystem:GetBasicModelIDBySkinID(RowName)
                DefaultDecorationInfo.BasicModelKey = BasicMeshRowName
                SkinDTConfig = OfficeSubsystem:GetOfficeDataTableRow(BasicMeshRowName)
            else
                DefaultDecorationInfo.BasicModelKey = RowName
            end
            break
        end
    end
    DefaultDecorationInfo.Transform = self.actor:GetTransform()
    DefaultDecorationInfo.Transform.Scale3D = UE.FVector(1.0, 1.0, 1.0)

    self.BasicModelKey = DefaultDecorationInfo.BasicModelKey
    return DefaultDecorationInfo
end

function OfficeDecorationComponent:IsModelBPChanged(SkinDTConfig)
    local PathName = tostring(UE.UKismetSystemLibrary.GetPathName(self.actor:GetClass()))
    -- 去掉_C
    PathName = PathName:sub(1,-3)
    
    --更换了蓝图，需要销毁重新创建
    if SkinDTConfig and SkinDTConfig.BP and tostring(SkinDTConfig.BP) ~= PathName then
        return true
    end   
    return false
end

---更换皮肤或者组件
---@param DecorationInfo FOfficeDecorationActorInfo
function OfficeDecorationComponent:UpdateSkinAndComponent(DecorationInfo, SkinDTConfig, EventParam)
    self:__ChangeMesh(DecorationInfo, SkinDTConfig)
    self:__ChangeColor(DecorationInfo)
end

function OfficeDecorationComponent:__ChangeMesh(DecorationInfo, SkinDTConfig)
    if SkinDTConfig == nil then
        return
    end
    
    local NewMaterialName = tostring(SkinDTConfig.Material)
    local StaticMeshComponents = self.actor:K2_GetComponentsByClass(UE.UStaticMeshComponent)
    local TargetMeshComp = StaticMeshComponents[1]

    -- 多个Mesh时使用有"DecoratorComp"这个Tag的组件
    if StaticMeshComponents:Length() > 1 then
        for _, MeshComp in pairs(StaticMeshComponents:ToTable()) do
            for _, ComponentTag in pairs(MeshComp.ComponentTags) do
                if ComponentTag == "DecoratorComp" then 
                    TargetMeshComp = MeshComp
                    break
                end
            end
        end
    end

    local OldMaterial = TargetMeshComp:GetMaterial(0)
    local OldMaterialPathName = UE.UKismetSystemLibrary.GetPathName(OldMaterial)
    G.log:info("yongzyzhang", "OldMaterialPathName:%s SkinDTConfig.Material:%s", OldMaterialPathName, NewMaterialName)
    if OldMaterialPathName ~= NewMaterialName then
        -- 换材质
        local MaterialInstance = UE.UObject.Load(NewMaterialName)
        if MaterialInstance then
            ---@type OfficeSubsystem
            local OfficeSubsystem = SubsystemUtils.GetOfficeSubsystem(self)
            self.MaterialDefaultColors = OfficeSubsystem:GetModelCompDefaultColors(self.CurrentModelID)
            
            TargetMeshComp:SetMaterial(0, MaterialInstance)
            self.actor:UpdateMaterialInstance()
            G.log:info("yongzyzhang", "NewMaterial :%s succeed changed", NewMaterialName)
        else
            G.log:error("yongzyzhang", "NewMaterial :%s is not exist", NewMaterialName)
        end
    end
end

--function OfficeDecorationComponent:__LoadDefaultColor(MaterialInstance)
--    --TODO 读取部件数
--    self.MaterialDefaultColors = {}
--    for PartIndex = 1, 4 do
--        local LinerColor = MaterialInstance:K2_GetVectorParameterValue("MaskedColor_" .. tostring(PartIndex))
--        self.MaterialDefaultColors[PartIndex] = LinerColor:ToFColor(false)
--        G.log:info("yongzyzhang","MaterialInstance part:%d default color:%s", PartIndex, tostring(self.MaterialDefaultColors[PartIndex]))
--    end
--end

function OfficeDecorationComponent:__ChangeColor(DecorationInfo)
    -- 根据DecorationInfo数据 创建或者更新本地装饰物Actor的显示
    local DecorationColorDict = {}
    for _, ComponentInfo in pairs(DecorationInfo.Component:ToTable()) do
        local PartIndex = ComponentInfo.Index
        if ComponentInfo.Color then
            DecorationColorDict[PartIndex] = ComponentInfo.Color
        end
        G.log:info("yongzyzhang", "OfficeDecorationComponent UpdateSkinAndComponent change actor:%s PartIndex:%s, color:%s",
                self.ActorID, PartIndex, utils.ToString(ComponentInfo.Color))
    end
    -- 补上默认颜色
    for PartIndex, DefaultPartColor in pairs(self.MaterialDefaultColors) do
        if DecorationColorDict[PartIndex] == nil then
            DecorationColorDict[PartIndex] = DefaultPartColor
        end
        self.actor["MaskedColor_" .. tostring(PartIndex)] = DecorationColorDict[PartIndex]
    end

    self.actor:SetMaskedColor()

end



return OfficeDecorationComponent
